openapi: 3.0.0
info:
  title: Hach Device Management
  version: 1.0.0
  description: Hach Device Management API documentation
paths:
  /devices/:
    get:
      summary: Get controllers that exist in the database
      description: List of all controllers
      tags:
        - Devices
      operationId: get_devices_serial_numbers
      responses:
        '200':
          description: Successfully getting all devices existing in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devices'
  /devices_with_all_parameters/:
    get:
      summary: Get controllers with all parameters that exist in the database
      description: List of all controllers
      tags:
        - DevicesWithAllParameters
      operationId: get_devices_with_all_parameters
      responses:
        '200':
          description: Successfully getting all devices existing in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesWithAllParameters'
    post:
      summary: Post a new controller with his connectivity and their probes
      description: Insert a new controller in the database
      tags:
        - DevicesWithAllParameters
      operationId: post_device_with_all_parameters
      parameters:
        - in: header
          name: serial number
          description: serial number of the device
          required: true
          schema:
            type: string
        - in: header
          name: connectivity
          description: connectivity of the device
          required: true
          schema:
            type: string
        - in: header
          name: probe 1
          description: first probe of the device
          schema:
            type: string
        - in: header
          name: probe 2
          description: second probe of the device
          schema:
            type: string
      requestBody:
        description: a JSON object containing devices information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicesWithAllParameters'
      responses:
        '200':
          description: Successfully inserting new device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesWithAllParameters'
  /devices_with_all_parameters/id:
    delete:
      summary: Delete device from the database
      description: Delete the device
      tags:
        - DevicesWithAllParameters
      operationId: delete_device_with_all_parameters
      parameters:
        - in: header
          name: deviceId
          description: id of the device
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Successfully deleting the device
  /probes/id:
    get:
      summary: Get number of sensor type
      description: List the id of the probe and his number used
      tags:
        - Probes
      operationId: get_number_of_sensor_type
      responses:
        '200':
          description: Successfully getting number of sensor type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probes'
  /users/signup:
    post:
      summary: Create a new user
      description: Insert a new user in the database
      tags:
        - Users
      operationId: post_new_user
      parameters:
        - in: header
          name: email
          description: email of the user
          required: true
          schema:
            type: string
        - in: header
          name: password
          description: password of the user
          required: true
          schema:
            type: string
      requestBody:
        description: a JSON object containing user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '409':
          description: Mail exist
        '500':
          description: Internal Server Error
  /users/login:
    post:
      summary: Log a new user
      description: Log the user into the API
      tags:
        - Users
      operationId: log_new_user
      parameters:
        - in: header
          name: email
          description: email of the user
          required: true
          schema:
            type: string
        - in: header
          name: password
          description: password of the user
          required: true
          schema:
            type: string
      requestBody:
        description: a JSON object containing user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Authentication failed
components:
  schemas:
    Devices:
      description: Schema of devices
      type: object
      properties:
        serial_number:
          type: string
          description: serial number of the devices
    DevicesWithAllParameters:
      description: Schema of devices with all parameters
      type: object
      properties:
        serial_number:
          type: string
          description: serial number of the devices
        connectivity:
          type: string
          description: connectivity of the devices
        probe_1:
          type: string
          description: name of the first probe of the devices
        probe_2:
          type: string
          description: name of the second probe of the devices
    Probes:
      description: Schema of probes
      type: object
      properties:
        probe_id:
          type: string
          description: id of the probe
        number_of_type:
          type: number
          description: number of sensor type
    Users:
      description: Schema of users
      type: object
      properties:
        email:
          type: string
          description: email of the user
        password:
          type: string
          description: password of the user
tags:
  - name: Devices
    description: devices management
  - name: DevicesWithAllParameters
    description: 'devices, probes and connectivity management'
  - name: Probes
    description: Probes management
  - name: Users
    description: Users management and login
